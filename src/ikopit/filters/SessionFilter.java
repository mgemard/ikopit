package ikopit.filters;

import ikopit.entities.UserSession;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;


import com.googlecode.objectify.Key;
import com.googlecode.objectify.ObjectifyService;
import com.googlecode.objectify.Result;

import static com.googlecode.objectify.ObjectifyService.ofy;

public class SessionFilter implements Filter {

	public static final String  SESSION_ID 				  = "sessionId";
	public static final String  LANGUAGE 				  = "language";  
	public static final String  SERVER 				  	= "server";      
	public static final int     COOKIE_MAX_AGE            = 60 * 60 * 24 * 365;

	public void init( FilterConfig config ) throws ServletException {
	}

	static {
		ObjectifyService.register(UserSession.class);
	}

	public void doFilter( ServletRequest req, ServletResponse res, FilterChain chain ) throws IOException,
	ServletException {
		/* Cast des objets request et response */
		HttpServletRequest request = (HttpServletRequest) req;
		HttpServletResponse response = (HttpServletResponse) res;

		/* Récupération de la session depuis la requête */
		HttpSession session = request.getSession();


		/**
		 * Si l'objet utilisateur n'existe pas dans la session en cours, alors
		 * on regarde si il y a un cookie sessionId.
		 */
		if ( session.getAttribute( SESSION_ID ) == null ) {
			/* Si il n'y a pas de cookie, on crée une session et on crée un cookie */
			String cookieSessionId = getCookieValue( request, SESSION_ID );
			if (cookieSessionId == null) {
				UserSession userSession = new UserSession();
				ofy().save().entity(userSession).now();  // async without the now()
				Long sessionId = userSession.getId();

				setCookie(response, SESSION_ID, String.valueOf(sessionId), COOKIE_MAX_AGE);
				/*
        		assert userSession.getId() != null;    // id was autogenerated
        		// Get it back
        		Result<UserSession> result = ofy().load().key(Key.create(UserSession.class, userSession.getId()));  // Result is async
        		UserSession fetched1 = result.now();    // Materialize the async value
				 */
			}
			/*save sessionId in session scope*/
			session.setAttribute(SESSION_ID,cookieSessionId);

		}

		/**
		 * Si l'objet language n'existe pas dans la session en cours, alors
		 * on regarde si il y a un cookie lng.
		 */
		if ( session.getAttribute( LANGUAGE ) == null ) {
			/* Si il n'y a pas de cookie, on crée une session et on crée un cookie */
			String cookieLanguage = getCookieValue( request, LANGUAGE );
			if (cookieLanguage != null) {
				session.setAttribute(LANGUAGE,cookieLanguage);
			}
			/*save sessionId in session scope*/


		}

		/**
		 * Si l'objet server n'existe pas dans la session en cours, alors
		 * on regarde si il y a un cookie server.
		 */
		if ( session.getAttribute( SERVER ) == null ) {
			/* Si il n'y a pas de cookie, on crée une session et on crée un cookie */
			String cookieLanguage = getCookieValue( request, SERVER );
			if (cookieLanguage != null) {
				session.setAttribute(SERVER,cookieLanguage);
			}
			/*save sessionId in session scope*/


		}



		/**
		 * If the param language exist in url, then the user changed the language
		 * we update the cookie
		 */
		if (request.getParameter(LANGUAGE) != null) setCookie(response, LANGUAGE, request.getParameter(LANGUAGE), COOKIE_MAX_AGE);
		//System.out.println(request.getParameter(LANGUAGE));

		//request.getRequestURI()
		
		
		
		/**
		 * If the request URI contains the language, 
		 * we update the cookie
		 */
		 Pattern pDe = Pattern.compile("^/de");
		 Matcher mDe = pDe.matcher(request.getRequestURI().toString());
		 boolean de = mDe.find();

		 Pattern pFr = Pattern.compile("^/fr");
		 Matcher mFr = pFr.matcher(request.getRequestURI().toString());
		 boolean fr = mFr.find();

		 Pattern pEn = Pattern.compile("^/en");
		 Matcher mEn = pEn.matcher(request.getRequestURI().toString());
		 boolean en = mEn.find();
		 
		 /*
		 response.setContentType("text/html");
	        PrintWriter writer = response.getWriter(); 
		writer.println("<html>");
     writer.println("<head>");
     writer.println("<title>Test</title>");
     writer.println("</head>");
     writer.println("<body bgcolor=white>");

     writer.println("<div>");
     writer.println(request.getServletPath().toString());
     writer.println("</div>");
     writer.println("<div>");
     writer.println(request.getServletPath().toString());
     writer.println("</div>");

     writer.println("</body>");
     writer.println("</html>");
     
     
     */
		if (fr) {
			setCookie(response, "fr", request.getParameter(LANGUAGE), COOKIE_MAX_AGE);
			session.setAttribute(LANGUAGE,"fr");


		}
		else if (de){
			setCookie(response, "de", request.getParameter(LANGUAGE), COOKIE_MAX_AGE);
			session.setAttribute(LANGUAGE,"de");
		}
		else if (en) {
			setCookie(response, "en", request.getParameter(LANGUAGE), COOKIE_MAX_AGE);
			session.setAttribute(LANGUAGE,"en");
		}
		




		chain.doFilter( request, response );
	}


	private static String getCookieValue( HttpServletRequest request, String nom ) {
		Cookie[] cookies = request.getCookies();
		if ( cookies != null ) {
			for ( Cookie cookie : cookies ) {
				if ( cookie != null && nom.equals( cookie.getName() ) ) {
					return cookie.getValue();
				}
			}
		}
		return null;
	}

	private static void setCookie( HttpServletResponse response, String nom, String valeur, int maxAge ) {
		Cookie cookie = new Cookie( nom, valeur );
		cookie.setMaxAge( maxAge );
		response.addCookie( cookie );
	}


	public void destroy() {
	}





}
